import { LoadingOutlined, StarOutlined } from '@ant-design/icons';
import { Form, Formik } from 'formik';
import { Link } from 'react-router-dom';
import React, { useContext, useEffect, useState } from 'react';
import './index.scss';
import './bmi.scss';
import Input from '../../components/common/Input/Input';
import AuthContext from '../../context/auth-context';
import BmiContext from '../../context/bmi-context';
import { BmiInfoSchema } from '../../validators';
import { IMAGE_PLACEHODLER_URI } from '.././../constants';
import { updateUserBmiInfoRequest } from '../../api/requests';
import { SearchDataList } from './Blogs';
import Slider from '../../components/common/Slider';
import { useMediaQuery } from 'react-responsive';
import { showNumOfBmiItemsBaseOnScreenSize, showRecipeLevelText } from '../../utils';
import BreakfastIcon, { LunchIcon, DinnerIcon } from '../../assets/svg-icons/breakfast';
import clockImg from '../../assets/img/clock.png';
import starImg from '../../assets/img/star.png';
import lightningImg from '../../assets/img/lightning.png';

export const mobilityOptions = [
    {
        value: 1,
        label: '√çt ho·∫°t ƒë·ªông, ch·ªâ ƒÉn ƒëi l√†m v·ªÅ ng·ªß',
    },
    {
        value: 1.375,
        label: 'C√≥ t·∫≠p nh·∫π nh√†ng, tu·∫ßn 1-3 bu·ªïi',
    },
    {
        value: 1.5,
        label: 'C√≥ v·∫≠n ƒë·ªông v·ª´a 4-5 bu·ªïi',
    },
    {
        value: 1.72,
        label: 'V·∫≠n ƒë·ªông nhi·ªÅu 6-7 bu·ªïi',
    },
    {
        value: 1.9,
        label: 'V·∫≠n ƒë·ªông r·∫•t nhi·ªÅu ng√†y t·∫≠p 2 l·∫ßn',
    },
];

export const MEALS = ['B·ªØa s√°ng', 'B·ªØa tr∆∞a', 'B·ªØa t·ªëi'];

const BmiInfo = () => {
    const { userInfo, isLoading: isLoadingUserInfo } = useContext(AuthContext);
    const {
        bmiDetail: { dataResponse, isLoading },
        mainIngredients: { dataResponse: mainIngredientList },
        recipes: { dataResponse: recipeList, error, isLoading: isLoadingRecipes },
        onFetchDetail,
        onFetchRecipes,
        onFetchMainIngredients,
        onFetchRecipesByFavourite,
        onClearRecipeList,
    } = useContext(BmiContext);
    const [recipeType, setRecipeType] = useState('total');
    const [meal, setMeal] = useState('');
    const [mainIngredient, setMainIngredient] = useState('');
    const [search, setSearch] = useState('');
    const [showFetchMoreFavouriteRecipes, setShowFetchMoreFavouriteRecipes] = useState(true);

    const breakfastList = recipeList.filter((it) => it.dishCate === 'B·ªØa s√°ng');
    const lunchList = recipeList.filter((it) => it.dishCate === 'B·ªØa tr∆∞a');
    const dinnerList = recipeList.filter((it) => it.dishCate === 'B·ªØa t·ªëi');
    const dessertList = recipeList.filter((it) => it.dishCate === 'Tr√°ng mi·ªáng');

    const isTablet = useMediaQuery({ query: '(max-width: 991px)' });
    const isSmallTablet = useMediaQuery({ query: '(max-width: 768px)' });
    const isExtraSmallTablet = useMediaQuery({ query: '(max-width: 630px)' });
    const isMobile = useMediaQuery({ query: '(max-width: 465px)' });

    const remainCalo = recipeType === 'favourite' ? recipeList?.[recipeList?.length - 1]?.totalRemainingCalo : 0;

    useEffect(() => {
        if (userInfo?.username) {
            onFetchDetail(userInfo?.username);
            onFetchMainIngredients();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [userInfo]);

    useEffect(() => {
        if (dataResponse?.totalCalo) {
            onFetchRecipes(dataResponse?.totalCalo);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [dataResponse]);

    if (isLoadingUserInfo || isLoading) {
        return (
            <section className="client-bmi__info">
                <div className="global-list__loader-container">
                    <LoadingOutlined className="global-list__loader-icon" />
                </div>
            </section>
        );
    }

    const renderRecipeList = (list) => {
        if (recipeType === 'total') {
            if (list.length < (isSmallTablet ? 3 : 4)) {
                return (
                    <div className="d-flex">
                        {list?.map((item, index) => (
                            <BmiRecipeItem key={item.dishID + index} item={item} />
                        ))}
                    </div>
                );
            }
            return (
                <Slider
                    slidesToShow={showNumOfBmiItemsBaseOnScreenSize(
                        isMobile,
                        isExtraSmallTablet,
                        isSmallTablet,
                        isTablet,
                    )}
                >
                    {list?.map((item, index) => (
                        <BmiRecipeItem key={item.dishID + index} item={item} />
                    ))}
                </Slider>
            );
        }
        return (
            <ul className="mt-2">
                {list?.map((item, index) => (
                    <RecipeItem key={item.dishID + index} item={item} />
                ))}
            </ul>
        );
    };

    return (
        <section className="client-bmi__info">
            <div className="custom-page__container">
                <div className="d-flex gap-3 mb-4 bmi-form__wrapper">
                    <img
                        src={userInfo?.avatarImage || IMAGE_PLACEHODLER_URI}
                        alt=""
                        className="object-fit-contain align-self-baseline rounded-4"
                    />
                    <BmiForm
                        item={dataResponse}
                        userInfo={userInfo}
                        onRefetch={() => {
                            onFetchDetail(userInfo?.username);
                        }}
                    />
                </div>
                <div className="bmi-option__titles">
                    <h3>üí°G·ª£i √Ω cho b·∫°n</h3>
                    <p>Th·ª±c ƒë∆°n s·∫Ω ƒë∆∞·ª£c l·ªçc theo ch·ªâ s·ªë BMI c·ªßa b·∫°n</p>
                </div>
                <div>
                    <button
                        className={`button button-sm button-rounded-6 me-3 ${
                            recipeType === 'total' ? 'button-outlined-hover-green has-border' : 'button-light'
                        }`}
                        onClick={() => {
                            onClearRecipeList();
                            onFetchRecipes(dataResponse?.totalCalo);
                            setRecipeType('total');
                            setMeal('');
                            setMainIngredient('');
                        }}
                    >
                        {recipeType === 'total' ? '‚úÖ' : ''} Th·ª±c ƒë∆°n ph√π h·ª£p
                    </button>
                    <button
                        className={`button button-sm button-rounded-6 me-3 ${
                            recipeType === 'favourite' ? 'button-outlined-hover-green has-border' : 'button-light'
                        }`}
                        onClick={() => {
                            onClearRecipeList();
                            setRecipeType('favourite');
                            setMeal('');
                            setMainIngredient('');
                        }}
                    >
                        {recipeType === 'favourite' ? '‚úÖ' : ''} Th·ª±c ƒë∆°n theo b·ªØa
                    </button>
                </div>
                {error && <p className="error-message mt-4">{error?.messContent}</p>}
                {recipeType === 'favourite' && (
                    <div className="p-4 bg-green-blur rounded mt-4">
                        <h5 className="mb-4">Ch·ªçn b·ªØa</h5>
                        <div className="d-flex gap-4 align-items-center mb-3">
                            {MEALS.map((value) => (
                                <label key={value} className="custom-radio__container">
                                    {value}
                                    <input
                                        type="radio"
                                        onChange={(e) => {
                                            setMeal(e.target.value);
                                        }}
                                        value={value}
                                        checked={value === meal}
                                    />
                                    <span className="radioCheckmark" />
                                </label>
                            ))}
                        </div>
                        <div className="d-flex align-items-center gap-3 bmi__choose-main-ing__row">
                            <h5 className="mb-0">Ch·ªçn nguy√™n li·ªáu ch√≠nh</h5>
                            <SearchDataList
                                search={search}
                                setSearch={setSearch}
                                callback={() => {
                                    if (search.trim()) {
                                        onFetchMainIngredients(search);
                                    }
                                }}
                                emptySearchCallback={() => onFetchMainIngredients('')}
                                className="bg-white"
                            />
                        </div>
                        <br />
                        <div className="main-ingredient__list mb-3">
                            {mainIngredientList?.map((value) => (
                                <label key={value} className="custom-radio__container">
                                    {value}
                                    <input
                                        type="radio"
                                        onChange={(e) => {
                                            setMainIngredient(e.target.value);
                                        }}
                                        value={value}
                                        checked={value === mainIngredient}
                                    />
                                    <span className="radioCheckmark" />
                                </label>
                            ))}
                        </div>
                        <div className="d-flex justify-content-end">
                            <button
                                className="button button-sm button-green"
                                disabled={!meal || !mainIngredient}
                                onClick={() => {
                                    onFetchRecipesByFavourite(dataResponse?.totalCalo, meal, mainIngredient);
                                    setShowFetchMoreFavouriteRecipes(true);
                                }}
                            >
                                T√¨m ki·∫øm
                            </button>
                        </div>
                    </div>
                )}
                {recipeType === 'favourite' && remainCalo && remainCalo > 0 && (
                    <div
                        className={`d-flex align-items-center gap-3 mt-3 ${
                            showFetchMoreFavouriteRecipes ? '' : 'd-none'
                        }`}
                    >
                        {remainCalo < 200 ? (
                            <p>
                                Hi·ªán t·∫°i l∆∞·ª£ng calo c√≤n l·∫°i c·ªßa b·∫°n l√† <strong>{remainCalo}</strong> ƒëang d∆∞·ªõi 200, b·∫°n
                                c√≥ mu·ªën t√¨m m√≥n Tr√°ng mi·ªáng hay kh√¥ng?
                            </p>
                        ) : (
                            <p>
                                B·∫°n c√≤n thi·∫øu : <strong>{remainCalo}</strong> calo, b·∫°n c√≥ mu·ªën hi·ªÉn th·ªã th√™m c√¥ng th·ª©c
                                kh√¥ng ?
                            </p>
                        )}

                        <div className="d-flex align-items-center gap-2">
                            <button
                                className="button button-sm button-green"
                                onClick={() => {
                                    if (remainCalo < 200) {
                                        setShowFetchMoreFavouriteRecipes(false);
                                    }
                                    onFetchRecipesByFavourite(
                                        remainCalo,
                                        meal,
                                        mainIngredient,
                                        true,
                                        recipeList.map((it) => it.dishID).join(','),
                                    );
                                }}
                            >
                                C√≥
                            </button>
                            <button
                                className="button button-sm button-secondary"
                                onClick={() => setShowFetchMoreFavouriteRecipes(false)}
                            >
                                Kh√¥ng
                            </button>
                        </div>
                    </div>
                )}
                <div
                    className={`${
                        recipeType === 'total' ? 'bg-green-blur rounded-4 py-2 px-3 mb-3 pb-4 custom-shadow mt-4' : ''
                    }`}
                >
                    {breakfastList?.length > 0 && (
                        <h4 className={`mb-3 ${recipeType === 'total' ? '' : 'd-none'}`}>
                            <BreakfastIcon /> B·ªØa s√°ng {breakfastList?.reduce((acc, it) => acc + it.totalCalo, 0)} calo
                        </h4>
                    )}
                    <ul className="mt-2">{renderRecipeList(breakfastList)}</ul>
                </div>
                <div
                    className={`${
                        recipeType === 'total' ? 'bg-green-blur rounded-4 py-2 px-3 mb-3 pb-4 custom-shadow mt-4' : ''
                    }`}
                >
                    {lunchList?.length > 0 && (
                        <h4 className={`mt-4 mb-3 ${recipeType === 'total' ? '' : 'd-none'}`}>
                            <LunchIcon /> B·ªØa tr∆∞a {lunchList?.reduce((acc, it) => acc + it.totalCalo, 0)} calo
                        </h4>
                    )}
                    <ul className="mt-2">{renderRecipeList(lunchList)}</ul>
                </div>
                <div
                    className={`${
                        recipeType === 'total' ? 'bg-green-blur rounded-4 py-2 px-3 mb-3 pb-4 custom-shadow mt-4' : ''
                    }`}
                >
                    {dinnerList?.length > 0 && (
                        <h4 className={`mt-4 mb-3 ${recipeType === 'total' ? '' : 'd-none'}`}>
                            <DinnerIcon /> B·ªØa t·ªëi {dinnerList?.reduce((acc, it) => acc + it.totalCalo, 0)} calo
                        </h4>
                    )}
                    <ul className="mt-2">{renderRecipeList(dinnerList)}</ul>
                </div>
                <div
                    className={`${
                        recipeType === 'total' ? 'bg-green-blur rounded-4 py-2 px-3 mb-3 pb-4 custom-shadow mt-4' : ''
                    }`}
                >
                    {dessertList?.length > 0 && (
                        <h4 className={`mt-4 mb-3 ${recipeType === 'total' ? '' : 'd-none'}`}>
                            Tr√°ng mi·ªáng {dessertList?.reduce((acc, it) => acc + it.totalCalo, 0)} calo
                        </h4>
                    )}
                    <ul className="mt-2">{renderRecipeList(dessertList)}</ul>
                </div>
                {isLoadingRecipes && (
                    <div className="global-list__loader-container">
                        <LoadingOutlined className="global-list__loader-icon" />
                    </div>
                )}
            </div>
        </section>
    );
};

export default BmiInfo;

const RecipeItem = ({ item }) => (
    <li className="global-recipe__list-item mb-4 bg-green-blur custom-shadow rounded-3 py-3 px-3">
        <div className="d-flex gap-3">
            <img
                src={item?.dishImageList?.[0]?.url || IMAGE_PLACEHODLER_URI}
                alt=""
                className="rounded-2 recipe-list_item-avatar"
            />
            <div className="flex-fill">
                <div className="recipe-list_item-content mb-2">
                    <h5>
                        <Link
                            to={`/recipe-detail/${item.dishID}`}
                            onClick={() =>
                                window.scrollTo({
                                    top: 0,
                                    left: 0,
                                })
                            }
                        >
                            {item.dishName}
                        </Link>
                    </h5>
                    <p>{item.formulaDescribe}</p>
                    <p className="d-flex align-items-center gap-3">
                        <strong>By {item.verifier}</strong>
                        <span className="text-muted">{item?.createDate || '-'}</span>
                    </p>
                    <div>
                        <strong>Calo : </strong> <span>{item.totalCalo}</span>
                    </div>
                </div>
                {item.avgStarRate === 0 ? (
                    <p>Ch∆∞a c√≥ ƒë√°nh gi√°</p>
                ) : (
                    <div className="d-flex align-items-center gap-2">
                        ƒê√°nh gi√° c√¥ng th·ª©c : {item.avgStarRate}{' '}
                        <StarOutlined
                            style={{
                                color: '#fcdd0d',
                            }}
                        />
                    </div>
                )}
            </div>
        </div>
    </li>
);

const BmiForm = ({ item, userInfo, onRefetch }) => {
    const [isProcessing, setIsProcessing] = useState(false);

    const onSubmit = (values) => {
        setIsProcessing(true);
        updateUserBmiInfoRequest({
            target: values.target,
            high: values.high,
            weight: values.weight,
            r: values.mobility,
            username: userInfo?.username,
            gender: item?.gender,
            dob: item.dob,
        })
            .then(({ data }) => {
                setIsProcessing(false);
                onRefetch();
            })
            .catch((err) => {
                setIsProcessing(false);
                console.log(err);
            });
    };

    return (
        <div className={`bmi-form__info p-4 bg-white flex-fill rounded-4 border ${isProcessing ? 'divDisabled' : ''}`}>
            <h3 className="bmi-form__info-title">
                Th√¥ng tin c√° nh√¢n{' '}
                <Link to={`/profile/${userInfo?.id}`} className="text-green ms-4 text-small">
                    Ch·ªânh s·ª≠a
                </Link>
            </h3>
            <div className="d-flex justify-content-between align-items-center mb-3 bmi-form__info-unedit">
                <p>
                    <strong>T√™n</strong> : {item?.name}
                </p>
                <p>
                    <strong>Ng√†y sinh</strong> : {item?.dob?.join('-')}
                </p>
                <p>
                    <strong>Gi·ªõi t√≠nh</strong> : {item?.gender}
                </p>
            </div>
            <hr />
            <Formik
                initialValues={{
                    high: item?.high,
                    weight: item?.weight,
                    target: item?.target,
                    mobility: item?.mobility || 1,
                }}
                onSubmit={onSubmit}
                validationSchema={BmiInfoSchema}
            >
                {({ errors, touched, values, handleChange }) => (
                    <Form>
                        <h3 className="bmi-form__info-title">Ch·ªâ s·ªë BMI </h3>
                        <div className="d-flex gap-3">
                            <Input
                                name="high"
                                onChange={handleChange}
                                placeholder="Chi·ªÅu cao :"
                                label="Chi·ªÅu cao(cm) :"
                                value={values.high}
                                error={errors.high}
                                touched={touched.high}
                                className="flex-fill"
                            />
                            <Input
                                name="weight"
                                onChange={handleChange}
                                placeholder="C√¢n n·∫∑ng"
                                label="C√¢n n·∫∑ng(kg) :"
                                value={values.weight}
                                error={errors.weight}
                                touched={touched.weight}
                                className="flex-fill"
                            />
                        </div>
                        <div className="d-flex gap-3">
                            <Input
                                type="select"
                                name="target"
                                label="M·ª•c ti√™u"
                                onChange={handleChange}
                                value={values.target}
                                error={errors.target}
                                touched={touched.target}
                                className="flex-fill"
                                inputClassName="full"
                            >
                                <option value="Gi·∫£m c√¢n">Gi·∫£m c√¢n</option>
                                <option value="Gi·ªØ nguy√™n">Gi·ªØ nguy√™n</option>
                                <option value="TƒÉng c√¢n">TƒÉng c√¢n</option>
                            </Input>
                            <Input
                                type="select"
                                name="mobility"
                                label="Ch·ªâ s·ªë R"
                                onChange={handleChange}
                                value={values.mobility}
                                error={errors.mobility}
                                touched={touched.mobility}
                                className="flex-fill"
                                inputClassName="full"
                                title={
                                    'Ch·ªâ s·ªë kh·ªëi c∆° th·ªÉ (BMI - Body mass index) l√† m·ªôt ph√©p t√≠nh d·ª±a tr√™n chi·ªÅu cao v√† c√¢n n·∫∑ng, gi√∫p x√°c ƒë·ªãnh xem m·ªôt ng∆∞·ªùi c√≥ c√¢n n·∫∑ng chu·∫©n, nh·∫π c√¢n, th·ª´a c√¢n hay b√©o ph√¨.'
                                }
                            >
                                {mobilityOptions.map(({ value, label }) => (
                                    <option value={value} key={value}>
                                        {label}
                                    </option>
                                ))}
                            </Input>
                        </div>
                        <div className="d-flex gap-4 align-items-center mb-3">
                            <strong className="min-width-120">T·ªïng s·ªë calo: </strong>
                            <p>
                                <strong>{item?.totalCalo}</strong> calo
                            </p>
                        </div>
                        {item?.messContent && <p className="mb-3 error-message">{item?.messContent}</p>}
                        <div className="d-flex justify-content-end">
                            <button
                                className="button button-sm button-green"
                                type="submit"
                                disabled={item?.messContent}
                            >
                                L∆∞u
                            </button>
                        </div>
                    </Form>
                )}
            </Formik>
        </div>
    );
};

const BmiRecipeItem = ({ item }) => (
    <li className="bmi-recipe__item">
        <img
            className="bmi-recipe__item-img"
            src={item?.dishImageList?.[0]?.url || 'https://via.placeholder.com/150'}
            alt=""
        />
        <div className="p-2 pb-4">
            <Link
                to={`/recipe-detail/${item.dishID}`}
                className="d-block"
                onClick={() =>
                    window.scrollTo({
                        top: 0,
                        left: 0,
                    })
                }
            >
                {item.dishName}
            </Link>
            <div className="d-flex gap-2 justify-content-between mt-3">
                <div className="recipe-item__extra-info">
                    <img src={lightningImg} alt="" /> {showRecipeLevelText(item.level)}
                </div>
                <div className="recipe-item__extra-info">
                    <img src={clockImg} alt="" /> {item.time} ph√∫t
                </div>
                <div className="recipe-item__extra-info">
                    <img src={starImg} alt="" /> {item.avgStarRate}/5
                </div>
            </div>
            <p className="mt-2">
                By <strong>{item.verifier}</strong> <span className="text-muted">{item.createDate}</span>
            </p>
        </div>
    </li>
);
